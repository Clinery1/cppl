use lalrpop_util::ParseError;
use cppl_ast::raw::*;
use cppl_error::{
    Error,
    ErrorLevel,
    Location,
};
use cppl_lexer::Token;
use crate::parse_char;


grammar<'input>(filename:&'input str);


extern {
    type Location=Location;
    type Error=crate::Error<'input,&'static str>;
    enum Token<'input> {
        "fn"=>Token::Keyword(crate::Keyword::Function),
        "type"=>Token::Keyword(crate::Keyword::Type),
        "interface"=>Token::Keyword(crate::Keyword::Interface),
        "pub"=>Token::Keyword(crate::Keyword::Pub),
        "mut"=>Token::Keyword(crate::Keyword::Mut),
        "impl"=>Token::Keyword(crate::Keyword::Impl),
        "import"=>Token::Keyword(crate::Keyword::Import),
        "for"=>Token::Keyword(crate::Keyword::For),
        "while"=>Token::Keyword(crate::Keyword::While),
        "loop"=>Token::Keyword(crate::Keyword::Loop),
        "return"=>Token::Keyword(crate::Keyword::Return),
        "continue"=>Token::Keyword(crate::Keyword::Continue),
        "match"=>Token::Keyword(crate::Keyword::Match),
        "enum"=>Token::Keyword(crate::Keyword::Enum),
        "module"=>Token::Keyword(crate::Keyword::Module),
        "this"=>Token::Keyword(crate::Keyword::This),
        "true"=>Token::Keyword(crate::Keyword::True),
        "false"=>Token::Keyword(crate::Keyword::False),
        "const"=>Token::Keyword(crate::Keyword::Const),
        "static"=>Token::Keyword(crate::Keyword::Static),
        "and"=>Token::Keyword(crate::Keyword::And),
        "or"=>Token::Keyword(crate::Keyword::Or),
        "in"=>Token::Keyword(crate::Keyword::In),
        "is"=>Token::Keyword(crate::Keyword::Is),
        "Word"=>Token::Word(<&'input str>),
        ","=>Token::Comma,
        ":"=>Token::Colon,
        "::"=>Token::Associated,
        ";"=>Token::SemiColon,
        "("=>Token::ParenthesisStart,
        ")"=>Token::ParenthesisEnd,
        "["=>Token::BracketStart,
        "]"=>Token::BracketEnd,
        "{"=>Token::BraceStart,
        "}"=>Token::BraceEnd,
        ":="=>Token::Decl,
        ">="=>Token::GreaterEqual,
        ">"=>Token::Greater,
        "<="=>Token::LessEqual,
        "<"=>Token::Less,
        "="=>Token::Equal,
        "!="=>Token::NotEqual,
        "<-"=>Token::Assign,
        "-"=>Token::Dash,
        "."=>Token::Dot,
        "..."=>Token::Etc,
        "|"=>Token::Union,
        "+"=>Token::Add,
        "*"=>Token::Mul,
        "/"=>Token::Div,
        "%"=>Token::Mod,
        "&"=>Token::And,
        "!"=>Token::Not,
        "'"=>Token::SingleQuote,
        "\\"=>Token::Backslash,
        "=>"=>Token::MatchSeparator,
        "String"=>Token::String(<&'input str>),
        "Newline"=>Token::Newline,
        "Number"=>Token::Number(<&'input str>),
        "Float"=>Token::Float(<&'input str>),
    }
}


pub All:Vec<Statement<'input>>={
    <BlockInner*>,
    <BlockInner*> SkipNewline,
};


AnonFunctionSignature:AnonFunctionSignature<'input>={
    <start:@L> "fn" <params:Parameters> <ret_type:(":" <TypeEnclosed>)?> <end:@R>=>AnonFunctionSignature {
        start,
        end,
        params,
        ret_type,
    },
};
AnonFunction:AnonFunction<'input>={
    <start:@L> <sig:AnonFunctionSignature> <block:Block> <end:@R>=>sig.to_function(block,start,end),
};
FunctionSignature:FunctionSignature<'input>={
    <start:@L> <public:Public?> "fn" <name:Word> <params:Parameters> <ret_type:(":" <Type>)?> <end:@R>=>FunctionSignature {
        start,
        end,
        public,
        name,
        params,
        ret_type,
    },
};
Function:Function<'input>={
    <start:@L> <sig:FunctionSignature> <block:Block> <end:@R>=>sig.to_function(block,start,end),
};
Parameters:Parameters<'input>={
    <start:@L> "[" "]" <end:@R>=>Parameters{start,end,method_type:MethodType::None,normal:Vec::new(),var_arg:None},
    <start:@L> "[" "this" <normal:("," <Parameter>)*> <var_arg:("," "..." <Parameter>)?> "]" <end:@R>=>Parameters {
        start,
        end,
        method_type:MethodType::This,
        normal,
        var_arg,
    },
    <start:@L> "[" "mut" "this" <normal:("," <Parameter>)*> <var_arg:("," "..." <Parameter>)?> "]" <end:@R>=>Parameters {
        start,
        end,
        method_type:MethodType::ThisMut,
        normal,
        var_arg,
    },
    <start:@L> "[" <normal:(<Parameter> ",")*> <last:Parameter> <var_arg:("," "..." <Parameter>)?> "]" <end:@R>=>{
        let mut normal=normal;
        normal.push(last);
        return Parameters {
            start,
            end,
            method_type:MethodType::None,
            normal,
            var_arg,
        };
    },
};
Parameter:Parameter<'input>={
    <start:@L> "mut" <name:Word> ":" <ty:Type> <end:@R>=>Parameter{start,end,mutable:true,name,ty},
    <start:@L> <name:Word> ":" <ty:Type> <end:@R>=>Parameter{start,end,mutable:false,name,ty},
};
TypeParameters:TypeParameters<'input>={
    <start:@L> "[" "]" <end:@R>=>TypeParameters{start,end,params:Vec::new()},
    <start:@L> "[" <params:(<TypeParameter> ",")*> <last:TypeParameter> ","? "]" <end:@R>=>{
        let mut params=params;
        params.push(last);
        return TypeParameters {
            start,
            end,
            params:params,
        };
    },
};
TypeParameter:TypeParameter<'input>=<start:@L> <name:Word> <ty:(":" <Type>)?> <end:@R>=>TypeParameter{start,end,name,ty};
Type:Type<'input>=<FunctionType>;
FunctionType:Type<'input>={
    <start:@L> <sig:AnonFunctionSignature> <end:@R>=>Type::FunctionSig{start,end,inner:Box::new(sig)},
    <CompositeType>,
};
CompositeType:Type<'input>={
    <start:@L> <tys:(<UnionType> "+")+> <last:UnionType> <end:@R>=>{
        let mut tys=tys;
        tys.push(last);
        return Type::Composite{start,end,inner:tys};
    },
    <UnionType>,
};
UnionType:Type<'input>={
    <start:@L> <tys:(<TypeInner> "|")+> <last:TypeInner> <end:@R>=>{
        let mut tys=tys;
        tys.push(last);
        return Type::Union{start,end,inner:tys};
    },
    <TypeInner>,
};
TypeInner:Type<'input>={
    <TypeInnerGeneric>,
    "(" <FunctionType> ")",
};
TypeEnclosed:Type<'input>=<FunctionTypeEnclosed>;
FunctionTypeEnclosed:Type<'input>={
    <start:@L> <sig:AnonFunctionSignature> <end:@R>=>Type::FunctionSig{start,end,inner:Box::new(sig)},
    <CompositeTypeEnclosed>,
};
CompositeTypeEnclosed:Type<'input>={
    <start:@L> "(" <tys:(<UnionTypeEnclosed> "+")+> <last:UnionTypeEnclosed> ")" <end:@R>=>{
        let mut tys=tys;
        tys.push(last);
        return Type::Composite{start,end,inner:tys};
    },
    <UnionTypeEnclosed>,
};
UnionTypeEnclosed:Type<'input>={
    <start:@L> "(" <tys:(<TypeInnerEnclosed> "|")+> <last:TypeInnerEnclosed> ")" <end:@R>=>{
        let mut tys=tys;
        tys.push(last);
        return Type::Union{start,end,inner:tys};
    },
    <TypeInnerEnclosed>,
};
TypeInnerEnclosed:Type<'input>={
    <TypeInnerGeneric>,
    "(" <FunctionTypeEnclosed> ")",
};
TypeInnerGeneric:Type<'input>={
    <start:@L> <name:Word> <end:@R>=>{
        match name {
            "Uint"=>Type::Uint{start,end},
            "Int"=>Type::Int{start,end},
            "Float"=>Type::Float{start,end},
            "DoubleFloat"=>Type::DoubleFloat{start,end},
            "Byte"=>Type::Byte{start,end},
            "Bool"=>Type::Bool{start,end},
            "Char"=>Type::Char{start,end},
            "String"=>Type::String{start,end},
            "Never"=>Type::Never{start,end},
            _=>Type::Named{start,end,name,generics:Vec::new()},
        }
    },
    <start:@L> <name:Word> "(" <first:CompositeType> ")" <end:@R>=>?{
        match name {
            "Uint"|
            "Int"|
            "Float"|
            "DoubleFloat"|
            "Byte"|
            "Bool"|
            "Char"|
            "String"|
            "Never"=>Err(ParseError::User{error:Error {
                start,
                end,
                filename,
                level:ErrorLevel::ParseError,
                reason:"builtin types cannot have generics",
            }}),
            _=>Ok(Type::Named{start,end,name,generics:vec![first]}),
        }
    },
    <start:@L> <name:Word> "(" <tys:(<CompositeType> ",")+> <last:CompositeType> ")" <end:@R>=>{
        let mut generics=tys;
        generics.push(last);
        return Type::Named{start,end,name,generics};
    },
    <start:@L> "{" SkipNewline? "}" <end:@R>=>{
        return Type::Object{start,end,fields:Vec::new(),exact:true};
    },
    <start:@L> "{" SkipNewline? "..." SkipNewline? "}" <end:@R>=>{
        return Type::Object{start,end,fields:Vec::new(),exact:false};
    },
    <start:@L> "{" SkipNewline? <fields:(<TypeObjectField> ObjectFieldEnd)*> <last:TypeObjectField> ObjectFieldEnd? "}" <end:@R>=>{
        let mut fields=fields;
        fields.push(last);
        return Type::Object{start,end,fields,exact:false};
    },
    <start:@L> "{" SkipNewline? <fields:(<TypeObjectField> ObjectFieldEnd)*> <last:TypeObjectField> ObjectFieldEnd "..." SkipNewline? "}" <end:@R>=>{
        let mut fields=fields;
        fields.push(last);
        return Type::Object{start,end,fields,exact:true};
    },
};
Block:Block<'input>={
    <start:@L> "{" SkipNewline? "}" <end:@R>=>Block{start,end,inner:Vec::new()},
    <start:@L> "{" <inner:BlockInner+> "}" <end:@R>=>Block{start,end,inner},
    <start:@L> "{" <inner:BlockInner+> SkipNewline "}" <end:@R>=>Block{start,end,inner},
};
BlockInner:Statement<'input>={
    SkipNewline <Statement>,
    <Statement>,
};
Statement:Statement<'input>={
    <start:@L> <f:Function> <end:@R>=>Statement::FunctionDef{start,end,inner:f},
    <start:@L> <sig:FunctionSignature> <end:@R> StatementEnd=>Statement::FunctionSig{start,end,inner:sig},
    <start:@L> <i:Interface> <end:@R>=>Statement::InterfaceDef{start,end,inner:i},
    <start:@L> <expr:Expr> <end:@R> StatementEnd=>Statement::Expr{start,end,inner:expr},
    <start:@L> <type_def:TypeDef> <end:@R> StatementEnd=>Statement::TypeDef{start,end,inner:type_def},
    <start:@L> <var:VarDef> <end:@R> StatementEnd=>Statement::VarDef{start,end,inner:var},
    <start:@L> <var:ConstVarDef> <end:@R> StatementEnd=>Statement::ConstVarDef{start,end,inner:var},
    <start:@L> <var:StaticVarDef> <end:@R> StatementEnd=>Statement::StaticVarDef{start,end,inner:var},
    <start:@L> <assign:VarAssign> <end:@R> StatementEnd=>Statement::VarAssign{start,end,inner:assign},
    <start:@L> <e:Enum> <end:@R>=>Statement::Enum{start,end,inner:e},
    <ImportStmt> StatementEnd,
    <Module> StatementEnd,
    <start:@L> <i:Impl> <end:@R>=>Statement::Impl{start,end,inner:i},
};
Impl:Impl<'input>={
    <start:@L> "impl" <params:TypeParameters?> <for_ty:Type> <block:Block> <end:@R>=>Impl{start,end,params,interface:None,for_ty,block},
    <start:@L> "impl" <params:TypeParameters?> <interface:Type> "for" <for_ty:Type> <block:Block> <end:@R>=>Impl{start,end,params,interface:Some(interface),for_ty,block},
};
Module:Statement<'input>=<start:@L> "module" <name:Word> <end:@R>=>Statement::Module{start,end,inner:name};
Enum:Enum<'input>={
    <start:@L> <public:Public?> "enum" <name:Word> <params:TypeParameters?> "{" SkipNewline? <variants:(<Type> ObjectFieldEnd)*> <last:Type> ObjectFieldEnd? "}" <end:@R>=>{
        let mut variants=variants;
        variants.push(last);
        return Enum{start,end,public,name,params,variants};
    },
    <start:@L> <public:Public?> "enum" <name:Word> <params:TypeParameters?> "{" SkipNewline? "}" <end:@R>=>return Enum{start,end,public,name,params,variants:Vec::new()},
};
ImportStmt:Statement<'input>=<start:@L> "import" <import:Import> <end:@R>=>Statement::Import{start,end,inner:import};
Import:Import<'input>={
    <start:@L> <path:Word> <end:@R>=>Import::Path{start,end,inner:vec![path]},
    <start:@L> <paths:(<Word> "::")+> <last:Word> <end:@R>=>{
        let mut paths=paths;
        paths.push(last);
        return Import::Path{start,end,inner:paths};
    },
    <start:@L> <path:(<Word> "::")+> <block:ImportBlock> <end:@R>=>Import::PathBlock{start,end,path,block},
};
ImportBlock:Vec<Import<'input>>={
    "{" "}"=>Vec::new(),
    "{" SkipNewline? <imports:(<Import> ObjectFieldEnd)*> <last:Import> SkipNewline? "}"=>{
        let mut imports=imports;
        imports.push(last);
        return imports;
    },
    "{" SkipNewline? <imports:(<Import> ObjectFieldEnd)*> <last:Import> ObjectFieldEnd "}"=>{
        let mut imports=imports;
        imports.push(last);
        return imports;
    },
};
Expr:Expr<'input>={
    <start:@L> "&" <r:BooleanOps> <end:@R>=>Expr::Ref{start,end,inner:Box::new(r)},
    <start:@L> "&" "mut" <r:BooleanOps> <end:@R>=>Expr::RefMut{start,end,inner:Box::new(r)},
    <start:@L> <path:AssociatedPath> <end:@R>=>Expr::AssociatedPath{start,end,inner:path},
    <start:@L> <function:AnonFunction> <end:@R>=>Expr::AnonFunction{start,end,inner:function},
    <start:@L> "!" <l:BooleanOps> <end:@R>=>Expr::Not{start,end,inner:Box::new(l)},
    <start:@L> "{" <fields:(<ObjectField> ObjectFieldEnd)*> <last:ObjectField> ObjectFieldEnd? "}" <end:@R>=>{
        let mut fields=fields;
        fields.push(last);
        return Expr::ObjectCreation{start,end,inner:fields};
    },
    <BooleanOps>,
};
BooleanOps:Expr<'input>={
    <start:@L> <l:BooleanOps> "and" <r:Comparison> <end:@R>=>Expr::And{start,end,inner:Box::new([l,r])},
    <start:@L> <l:BooleanOps> "or" <r:Comparison> <end:@R>=>Expr::Or{start,end,inner:Box::new([l,r])},
    <Comparison>,
};
Comparison:Expr<'input>={
    <start:@L> <l:Comparison> "=" <r:Operand> <end:@R>=>Expr::Equal{start,end,inner:Box::new([l,r])},
    <start:@L> <l:Comparison> "!=" <r:Operand> <end:@R>=>Expr::NotEqual{start,end,inner:Box::new([l,r])},
    <start:@L> <l:Comparison> ">=" <r:Operand> <end:@R>=>Expr::GreaterEqual{start,end,inner:Box::new([l,r])},
    <start:@L> <l:Comparison> "<=" <r:Operand> <end:@R>=>Expr::LessEqual{start,end,inner:Box::new([l,r])},
    <start:@L> <l:Comparison> ">" <r:Operand> <end:@R>=>Expr::Greater{start,end,inner:Box::new([l,r])},
    <start:@L> <l:Comparison> "<" <r:Operand> <end:@R>=>Expr::Less{start,end,inner:Box::new([l,r])},
    <start:@L> <l:Comparison> "is" <r:Type> <end:@R>=>Expr::IsType{start,end,inner:Box::new(l),ty:r},
    <Operand>,
};
Operand:Expr<'input>={
    <start:@L> <l:Operand> "+" <r:Factor> <end:@R>=>Expr::Add{start,end,inner:Box::new([l,r])},
    <start:@L> <l:Operand> "-" <r:Factor> <end:@R>=>Expr::Sub{start,end,inner:Box::new([l,r])},
    <Factor>,
};
Factor:Expr<'input>={
    <start:@L> <l:Factor> "*" <r:Term> <end:@R>=>Expr::Mul{start,end,inner:Box::new([l,r])},
    <start:@L> <l:Factor> "/" <r:Term> <end:@R>=>Expr::Div{start,end,inner:Box::new([l,r])},
    <start:@L> <l:Factor> "%" <r:Term> <end:@R>=>Expr::Mod{start,end,inner:Box::new([l,r])},
    <CallPaths>,
};
CallPaths:Expr<'input>={
    <start:@L> <from:CallPaths> "." <name:Word> "(" ")" <end:@R>=>Expr::MethodCall{
            start,
            end,
        from:Box::new(from),
        name,
        args:Vec::new()
    },
    <start:@L> <from:CallPaths> "." <name:Word> "(" <args:(<Expr> ObjectFieldEnd)*> <last:Expr> ObjectFieldEnd? ")" <end:@R>=>{
        let mut args=args;
        args.push(last);
        return Expr::MethodCall {
            start,
            end,
            from:Box::new(from),
            name,
            args,
        };
    },
    <start:@L> <from:CallPaths> "." <name:Word> <end:@R>=>Expr::FieldAccess{start,end,from:Box::new(from),name},
    <FunctionCall>,
    <Term>,
};
Term:Expr<'input>={
    <start:@L> "this" <end:@R>=>Expr::Var{start,end,inner:"this"},
    <Var>,
    <start:@L> <d:Data> <end:@R>=>Expr::Data{start,end,inner:d},
    <ExprStatements>,
};
ExprStatements:Expr<'input>={
    <start:@L> <block:Block> <end:@R>=>Expr::Block{start,end,inner:block},
    <ForeverLoop>,
    <WhileLoop>,
    <ForLoop>,
    <start:@L> <m:Match> <end:@R>=>Expr::Match{start,end,inner:Box::new(m)},
    "(" <Expr> ")",
};
Data:Data<'input>={
    <Bool>,
    <String>,
    <Char>,
    <Float>,
    <Number>,
};
MatchPattern:MatchPattern<'input>={
    <start:@L> <d:Data> <end:@R>=>MatchPattern::Data{start,end,inner:d},
    <start:@L> <s:MatchPatternStructure> <end:@R>=>MatchPattern::Structure{start,end,inner:s},
    <start:@L> "." <name:Word> "(" ")" <end:@R>=>MatchPattern::MethodCall{start,end,name,args:Vec::new()},
    <start:@L> "." <name:Word> "(" <args:(<Expr> ObjectFieldEnd)*> <last:Expr> ObjectFieldEnd? ")" <end:@R>=>{
        let mut args=args;
        args.push(last);
        return MatchPattern::MethodCall {
            start,
            end,
            name,
            args,
        };
    },
    <start:@L> <v:Word> <end:@R>=>MatchPattern::Var{start,end,inner:v},
    <start:@L> "=" <r:Expr> <end:@R>=>MatchPattern::Equal{start,end,inner:r},
    <start:@L> "!=" <r:Expr> <end:@R>=>MatchPattern::NotEqual{start,end,inner:r},
    <start:@L> ">=" <r:Expr> <end:@R>=>MatchPattern::GreaterEqual{start,end,inner:r},
    <start:@L> "<=" <r:Expr> <end:@R>=>MatchPattern::LessEqual{start,end,inner:r},
    <start:@L> ">" <r:Expr> <end:@R>=>MatchPattern::Greater{start,end,inner:r},
    <start:@L> "<" <r:Expr> <end:@R>=>MatchPattern::Less{start,end,inner:r},
    <start:@L> "is" <r:Type> <end:@R>=>MatchPattern::IsType{start,end,inner:r},
};
MatchPatternStructure:MatchPatternStructure<'input>={
    // exact, fields
    <start:@L> <type_name:Word> "{" <block:(<MatchPatternStructureItem> ObjectFieldEnd)*> <last:MatchPatternStructureItem> ObjectFieldEnd? "}" <end:@R>=>{
        let mut block=block;
        block.push(last);
        return MatchPatternStructure::TypedBlock{start,end,exact:true,type_name,block};
    },
    // inexact, fields
    <start:@L> <type_name:Word> "{" <block:(<MatchPatternStructureItem> ObjectFieldEnd)*> <last:MatchPatternStructureItem> ObjectFieldEnd "..." "}" <end:@R>=>{
        let mut block=block;
        block.push(last);
        return MatchPatternStructure::TypedBlock{start,end,exact:false,type_name,block};
    },
    // maybe exact, no fields
    <start:@L> <type_name:Word> "{" SkipNewline? <etc:"..."?> "}" <end:@R>=>{
        return MatchPatternStructure::TypedBlock{start,end,exact:etc.is_some(),type_name,block:Vec::new()};
    },
    // exact, fields
    <start:@L> "{" <block:(<MatchPatternStructureItem> ObjectFieldEnd)*> <last:MatchPatternStructureItem> ObjectFieldEnd? "}" <end:@R>=>{
        let mut block=block;
        block.push(last);
        return MatchPatternStructure::Block{start,end,exact:true,block};
    },
    // inexact, fields
    <start:@L> "{" <block:(<MatchPatternStructureItem> ObjectFieldEnd)*> <last:MatchPatternStructureItem> ObjectFieldEnd "..." "}" <end:@R>=>{
        let mut block=block;
        block.push(last);
        return MatchPatternStructure::Block{start,end,exact:false,block};
    },
    // maybe exact, no fields
    <start:@L> "{" SkipNewline? <etc:"..."?> "}" <end:@R>=>{
        return MatchPatternStructure::Block{start,end,exact:etc.is_some(),block:Vec::new()};
    },
};
MatchPatternStructureItem:MatchPatternStructureItem<'input>={
    <start:@L> <name:Word> <end:@R>=>MatchPatternStructureItem::Field{start,end,inner:name},
    <start:@L> <name:Word> ":" <rename:Word> <end:@R>=>MatchPatternStructureItem::NamedField{start,end,name,rename},
    <start:@L> <name:Word> ":" <block:MatchPatternStructure> <end:@R>=>MatchPatternStructureItem::NamedBlock{start,end,name,block},
};
Match:Match<'input>={
    <start:@L> "match" <to_match:Expr> "{" SkipNewline? "}" <end:@R>=>Match{start,end,to_match,leafs:Vec::new()},
    <start:@L> "match" <to_match:Expr> "{" SkipNewline? <leafs:(<MatchPattern> "=>" <Expr> ObjectFieldEnd)*> <last:(<MatchPattern> "=>" <Expr>)> ObjectFieldEnd? "}" <end:@R>=>{
        let mut leafs=leafs;
        leafs.push(last);
        return Match{start,end,to_match,leafs};
    },
};
ForeverLoop:Expr<'input>=<start:@L> "loop" <block:Block> <end:@R>=>Expr::ForeverLoop{start,end,inner:block};
WhileLoop:Expr<'input>=<start:@L> "while" <condition:Expr> <block:Block> <end:@R>=>Expr::WhileLoop{start,end,condition:Box::new(condition),block};
ForLoop:Expr<'input>=<start:@L> "for" <var:Word> "in" <iterator:Expr> <block:Block> <end:@R>=>Expr::ForLoop{start,end,var,iterator:Box::new(iterator),block};
ObjectField:ObjectField<'input>={
    <start:@L> <public:Public?> <mutable:Mutable?> <name:Word> "<-" <data:Expr> <end:@R>=>ObjectField{start,end,public,mutable,name,data},
    <start:@L> <public:Public?> <mutable:Mutable?> <name:Word> <end:@R>=>ObjectField{start,end,public,mutable,name,data:Expr::Var{start,end,inner:name}},
};
Public:Visibility={
    "pub" "(" <Visibility> ")",
    "pub" "(" <l:@L> ")" <r:@R>=>?Err(ParseError::UnrecognizedToken{
        token:(l,Token::ParenthesisEnd,r),
        expected:vec![
            "\"lib\"".into(),
            "\"local\"".into(),
            "\"full\"".into()
        ],
    }),
    <start:@L> "pub" <end:@R>=>Visibility::Full{start,end},
};
Mutable:Visibility={
    "mut" "(" <Visibility> ")",
    "mut" "(" <l:@L> ")" <r:@R>=>?Err(ParseError::UnrecognizedToken{
        token:(l,Token::ParenthesisEnd,r),
        expected:vec![
            "\"lib\"".into(),
            "\"local\"".into(),
            "\"full\"".into()
        ],
    }),
    <start:@L> "mut" <end:@R>=>Visibility::Full{start,end},
};
Visibility:Visibility={
    <start:@L> <w:Word> <end:@R>=>?{
        match w {
            "lib"=>Ok(Visibility::Library{start,end}),
            "local"=>Ok(Visibility::Local{start,end}),
            "full"=>Ok(Visibility::Full{start,end}),
            _=>Err(ParseError::UnrecognizedToken{token:(start,Token::Word(w),end),expected:vec!["\"lib\"".into(),"\"local\"".into(),"\"full\"".into()]}),
        }
    },
};
Interface:Interface<'input>={
    <start:@L> <public:Public?> "interface" <name:Word> <params:TypeParameters?> <requirement:(":" <Type>)?> <block:Block> <end:@R>=>Interface {
        start,
        end,
        public,
        name,
        params,
        requirement,
        block,
    },
};
TypeDef:TypeDef<'input>={
    <start:@L> <public:Public?> "type" <name:Word> <params:TypeParameters?> "<-" <ty:Type> <end:@R>=>TypeDef{start,end,public,name,params,ty},
};
VarDef:VarDef<'input>={
    <start:@L> <mutable:Mutable?> <name:Word> ":=" <data:Expr> <end:@R>=>VarDef{start,end,mutable,name,data:data,ty:None},
    <start:@L> <mutable:Mutable?> <name:Word> ":" <ty:Type> "=" <data:Expr> <end:@R>=>VarDef{start,end,mutable,name,data:data,ty:Some(ty)},
};
ConstVarDef:ConstVarDef<'input>=<start:@L> <public:Public?> "const" <name:Word> ":" <ty:Type> "=" <data:Expr> <end:@R>=>ConstVarDef{start,end,public,name,data:data,ty:ty};
StaticVarDef:StaticVarDef<'input>=<start:@L> <public:Public?> "static" <mutable:Mutable?> <name:Word> ":" <ty:Type> "=" <data:Expr> <end:@R>=>StaticVarDef{start,end,public,mutable,name,data:data,ty:ty};
VarAssign:VarAssign<'input>=<start:@L> <name:Word> "<-" <data:Expr> <end:@R>=>VarAssign{start,end,name,data};


TypeObjectField:TypeObjectField<'input>=<start:@L> <public:Public?> <mutable:Mutable?> <name:Word> ":" <ty:Type> <end:@R>=>TypeObjectField{start,end,public,mutable,name,ty};
ObjectFieldEnd:()={
    "," SkipNewline=>(),
    ","=>(),
};
String:Data<'input>=<start:@L> <s:"String"> <end:@R>=>Data::String{start,end,inner:s.into()};
Number:Data<'input>={
    <start:@L> <inner:"Number"> <end:@R>=>Data::GenericNumber{start,end,negative:false,inner},
    <start:@L> "-" <inner:"Number"> <end:@R>=>Data::GenericNumber{start,end,negative:true,inner},
};
Float:Data<'input>={
    <start:@L> <inner:"Float"> <end:@R>=>Data::GenericFloat{start,end,negative:false,inner},
    <start:@L> "-" <inner:"Float"> <end:@R>=>Data::GenericFloat{start,end,negative:true,inner},
};
Bool:Data<'input>={
    <start:@L> "true" <end:@R>=>Data::Bool{start,end,inner:true},
    <start:@L> "false" <end:@R>=>Data::Bool{start,end,inner:false},
};
Char:Data<'input>={
    <start:@L> "'" "\\" "'" "'" <end:@R>=>Data::Char{start,end,inner:'\''},
    <start:@L> "'" "\\" "\\" "'" <end:@R>=>Data::Char{start,end,inner:'\\'},
    <start:@L> "'" "\\" <num:"Number"> "'" <end:@R>=>?{
        if num!="0" {
            return Err(ParseError::User{error:Error {
                filename,
                start,
                end,
                level:ErrorLevel::ParseError,
                reason:"invalid escape sequence",
            }});
        }
        return Ok(Data::Char{start,end,inner:'\0'});
    },
    <start:@L> "'" "\\" <w:Word> "{" <n:"Number"> "}" "'" <end:@R>=>?{
        let mut s=String::with_capacity(w.len()+1);
        s.push('\\');
        s.push_str(w);
        s.push('{');
        s.push_str(n);
        s.push('}');
        return parse_char(s,filename,start,end).map(|c|Data::Char{start,end,inner:c}).map_err(|error|ParseError::User{error});
    },
    <start:@L> "'" "\\" <w:Word> "{" <hex:Word> "}" "'" <end:@R>=>?{
        let mut s=String::with_capacity(w.len()+1);
        s.push('\\');
        s.push_str(w);
        s.push('{');
        s.push_str(hex);
        s.push('}');
        return parse_char(s,filename,start,end).map(|c|Data::Char{start,end,inner:c}).map_err(|error|ParseError::User{error});
    },
    <start:@L> "'" "\\" <w:Word> "{" <n:"Number"> <hex:Word> "}" "'" <end:@R>=>?{
        let mut s=String::with_capacity(w.len()+1);
        s.push('\\');
        s.push_str(w);
        s.push('{');
        s.push_str(n);
        s.push_str(hex);
        s.push('}');
        return parse_char(s,filename,start,end).map(|c|Data::Char{start,end,inner:c}).map_err(|error|ParseError::User{error});
    },
    <start:@L> "'" "\\" <w:Word> "'" <end:@R>=>?{
        let mut s=String::with_capacity(w.len()+1);
        s.push('\\');
        s.push_str(w);
        return parse_char(s,filename,start,end).map(|c|Data::Char{start,end,inner:c}).map_err(|error|ParseError::User{error});
    },
    <start:@L> "'" <w:Word> "'" <end:@R>=>?{
        return parse_char(w.to_string(),filename,start,end).map(|c|Data::Char{start,end,inner:c}).map_err(|error|ParseError::User{error});
    },
};
Var:Expr<'input>=<start:@L> <name:Word> <end:@R>=>Expr::Var{start,end,inner:name};
AssociatedPath:Vec<&'input str>=<first:Word> <path:("::" <Word>)+>=>{
    let mut path=path;
    path.insert(0,first);
    return path;
};
FunctionCall:Expr<'input>={
    <start:@L> <name:Word> "(" ")" <end:@R>=>Expr::FunctionCall{start,end,path:vec![name],args:Vec::new()},
    <start:@L> <name:Word> "(" <args:(<Expr> ObjectFieldEnd)*> <last:Expr> ObjectFieldEnd? ")" <end:@R>=>{
        let mut args=args;
        args.push(last);
        return Expr::FunctionCall {
            start,
            end,
            path:vec![name],
            args,
        };
    },
    <start:@L> <path:AssociatedPath> "(" ")" <end:@R>=>Expr::FunctionCall{start,end,path,args:Vec::new()},
    <start:@L> <path:AssociatedPath> "(" <args:(<Expr> ObjectFieldEnd)*> <last:Expr> ObjectFieldEnd? ")" <end:@R>=>{
        let mut args=args;
        args.push(last);
        return Expr::FunctionCall {
            start,
            end,
            path,
            args,
        };
    },
};
SkipNewline:()="Newline"=>();
StatementEnd:()={
    "Newline"=>(),
    ";"+=>(),
};
Word:&'input str={
    "Word"=><>,
};
