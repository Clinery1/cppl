import std.alloc.Allocator
import std.alloc.Layout


constraint @[T:Any]=<
    public mut(self) length:UInt,
    public mut(self) capacity:UInt,
    public append:Fn(<item:T>,Uint),
    public remove:Fn(<index:Uint>,Option(T)),
    public index:Fn(<index:Uint>,Option(Ref(T))),
    public index_mut:Fn(<index:Uint>,Option(RefMut(T))),
>


public mut(self) length:=0
public mut(self) capacity:=0
mutable layout:Layout={
    public mutable size:=0
    public mutable alignment:=8
}
mutable pointer:Ptr(Slice(T))=None


public append:=[item:T,allocator:Allocator] Uint {
    capacity.greater(length.add(1)).then([]{
        layout.size.add_assign(item.byte_length())
        capacity=layout.size
        pointer.not_none().then_else(
            []{
                pointer=allocator.realloc({public pointer:=pointer;public new_layout:=layout})
            },
            []{
                pointer=allocator.alloc(layout)
            }
        )
        ptr.get_mut().index_mut(length)=item
        length.add_assign(1)
    })
}
public remove:=[index:Uint] Option(T) {
    // TODO: this part
}
public index:=[index:Uint] Option(Ref(T)) {
    // TODO: this part
}
public index_mut:=[index:Uint] Option(MutRef(T)) {
    // TODO: this part
}
