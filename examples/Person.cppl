module PersonName;


init @[initial_name:PersonName,initial_age:Uint]
// We can define the "Self" constraint by using the `@` name.
// This tells the interpreter that we are trying to define the constraint that is used when importing this module.
// "Self" constraints are always public, since they define the module's constraint. They are
// automatically imported when the module is imported in any way (`module` or `import`). In a
// future version, we will be able to auto-generate "Self" constraints on the module and manually
// specifying the "Self" constraint will not be required, but still highly recommended. For now
// though, it is **required**.
constraint @=<
    // the `PersonName` cosntraint is implicitly imported since we imported its module
    public mut(self) name:PersonName,
    // Some modules are imported by default. For example, all immutable objects except atomics
    // are automatically imported in every file for easy use.
    public mut(self) age:Uint,
    // Arguments to constraints can be passed in parenthesis
    public set_age:Fn(<new_age:Uint>,None),
    public set_first_name:Fn(<new_name:String>,None),
    public set_middle_name:Fn(<new_name:String>,None),
    public set_last_name:Fn(<new_name:String>,None),
>


public mut(self) name:=initial_name
public mut(self) age:=initial_age


// Parameters can be specified with square brackets like so:
public set_first_name:=[new_name:String] None {
    // just like arguments can be passed to constraints, arguments can be passed to blocks as well
    name.first=~new_name
}
public set_last_name:=[new_name:String] None {
    name.last=~new_name
}
public set_middle_name:=[new_name:String] None {
    name.middle=~new_name
}
