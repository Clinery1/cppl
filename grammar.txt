public_type="pub"
public_type="pub(lib)"
public_type="pub(file)"


statement_end=NEWLINE
statement_end=";"


function_def=public function_def_inner
function_def=function_def_inner

function_def_inner="fn" WORD generic_def parameters return_type block
function_def_inner="fn" WORD generic_def parameters block
function_def_inner="fn" WORD parameters return_type block
function_def_inner="fn" WORD parameters block

anon_function_def=public anon_function_def_inner
anon_function_def=anon_function_def_inner

anon_function_def_inner="fn" generic_def parameters return_type block
anon_function_def_inner="fn" generic_def parameters block
anon_function_def_inner="fn" parameters return_type block
anon_function_def_inner="fn" parameters block

function_sig=public function_sig_inner
function_sig=function_sig_inner

function_sig_inner="fn" WORD generic_def parameters return_type
function_sig_inner="fn" WORD generic_def parameters
function_sig_inner="fn" WORD parameters return_type
function_sig_inner="fn" WORD parameters

anon_function_sig=public function_sig_inner
anon_function_sig=function_sig_inner

anon_function_sig_inner="fn" generic_def parameters return_type
anon_function_sig_inner="fn" generic_def parameters
anon_function_sig_inner="fn" parameters return_type
anon_function_sig_inner="fn" parameters

parameters="[" "]"
parameters="[" "this" "]"
parameters="[" "this" "," parameters_inner "]"
parameters="[" parameters_inner "]"
parameters_inner=parameters_inner "," parameters_inner
parameters_inner=WORD ":" type

return_type=":" type

generic_def="[" "]"
generic_def="[" generic_def_inner "]"
generic_def_inner=generic_def_inner "," generic_def_inner
generic_def_inner=WORD ":" type
generic_def_inner=WORD


block="{" "}"
block="{" block_inner "}"
block_inner=block_inner statement
block_inner=statement


statement=function_def statement_end
statement=function_sig statement_end
statement=var_decl statement_end
statement=var_assign statement_end
statement=type_def statement_end
statement=interface_def statement_end
statement=interface_impl statement_end
statement=if_stmt statement_end
statement=break_stmt statement_end
statement=return_stmt statement_end
statement=continue_stmt statement_end
statement=while_loop statement_end
statement=for_loop statement_end
statement=forever_loop statement_end
statement=expr statement_end


forever_loop="'" WORD ":" "loop" block
forever_loop="loop" block


for_loop="'" WORD ":" "for" WORD "in" expr block
for_loop="for" WORD "in" expr block


while_loop="'" WORD ":" "while" expr block
while_loop="while" expr block


return_stmt="return" "'" WORD expr
return_stmt="return" "'" WORD
return_stmt="return" expr
return_stmt="return"

break_stmt="break" "'" WORD
break_stmt="break"

continue_stmt="continue" "'" WORD
continue_stmt="continue"


if_stmt="'" WORD ":" if_stmt_inner
if_stmt=if_stmt_inner
if_stmt_inner="if" expr block else_if_stmt
if_stmt_inner="if" expr block else_stmt
if_stmt_inner="if" expr block
else_if_stmt="else" "if" expr block else_if_stmt
else_if_stmt="else" "if" expr block else_stmt
else_if_stmt="else" "if" expr block
else_stmt="else" block


var_decl=public_type mutable_type var_decl_inner
var_decl=public_type var_decl_inner
var_decl=mutable_type var_decl_inner
var_decl=var_decl_inner
var_decl_inner=WORD ":" type "=" expr
var_decl_inner=WORD ":=" expr
var_decl_inner=WORD ":" type

mutable_type="mut"
mutable_type="mut(lib)"
mutable_type="mut(local)"

var_assign=WORD "=" expr


type_def=public_type type_def_inner
type_def=type_def_inner
type_def_inner="type" WORD "=" type


type_def_sig=public_type type_def_sig_inner
type_def_sig=type_def_sig_inner
type_def_sig_inner="type" WORD


interface_def=public_type interface_def_inner
interface_def=interface_def_inner

interface_def_inner="interface" WORD generic_def ":" type "=" "{" interface_item "}"
interface_def_inner="interface" WORD generic_def "=" "{" interface_item "}"
interface_def_inner="interface" WORD ":" interface_def_req "=" "{" interface_item "}"
interface_def_inner="interface" WORD "=" "{" interface_item "}"

interface_def_item=interface_def_item interface_def_item
interface_def_item=function STATEMENT_END
interface_def_item=function_sig STATEMENT_END
interface_def_item=type_def STATEMENT_END
interface_def_item=type_def_sig STATEMENT_END


interface_impl="impl" generic_def type "for" type "{" interface_impl_item "}"
interface_impl="impl" type "for" type "{" interface_impl_item "}"

interface_impl_item=interface_impl_item interface_impl_item
interface_impl_item=function STATEMENT_END
interface_impl_item=type_def STATEMENT_END


expr="(" expr ")"
expr=expr "+" expr
expr=expr "-" expr
expr=expr "*" expr
expr=expr "/" expr
expr=expr "%" expr
expr=expr "==" expr
expr=expr "!=" expr
expr=expr ">=" expr
expr=expr "<=" expr
expr=expr "||" expr
expr=expr "&&" expr
expr="!" expr
expr=associated_path arguments
expr=expr arguments
expr=field_path
expr=data
expr=block
expr=WORD

arguments="(" ")"
arguments="(" arguments_inner ")"
arguments_inner=expr "," arguments_inner
arguments_inner=expr

field_path=WORD field_path
field_path="." WORD

associated_path=WORD associated_path
associated_path="::" WORD


data=NUMBER
data="-" NUMBER
data=float
data=string
data=char
data=object_creation

object_creation="{" object_creation_inner "}"
object_creation="{" object_creation_inner object_creation_ending "}"

object_creation_inner=object_creation_inner object_creation_ending object_creation_inner
object_creation_inner=var_decl
object_creation_inner=public_type mutable_type WORD
object_creation_inner=public_type WORD
object_creation_inner=mutable_type WORD
object_creation_inner=WORD

object_creation_ending=","
object_creation_ending=NEWLINE

string="\"" string_inner "\""
string="r#" r_string_inner "#"
r_string_inner="#" r_string_inner "#"
r_string_inner="\"" string_inner "\""
string_inner=ANY string_inner

char="'" ANY "'"
char="'\\x" char_ascii_hex "'"
char="'\\u{" char_unicode_hex "}'"
char="'\\n'"
char="'\\r'"
char="'\\t'"
char="'\\0'"
char_ascii_hex=HEX_DIGIT HEX_DIGIT
char_unicode_hex=HEX_DIGIT**<1,6>

float="-" float_inner
float=float_inner
float_inner=NUMBER "." NUMBER
float_inner="." NUMBER
float_inner=NUMBER "."


type=WORD
type=WORD "(" type ")"
type="{" "}"
type="{" "..." "}"
type="{" type_object_inner (statement_end type_object_inner)* "}"
type="{" type_object_inner (statement_end type_object_inner)* "..." "}"
type=type "|" type
type=type "+" type
type_object_inner=public_type mutable_type WORD ":" type
type_object_inner=public_type WORD ":" type
type_object_inner=mutable_type WORD ":" type
type_object_inner=WORD ":" type
